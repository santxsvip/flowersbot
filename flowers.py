import asyncio
import aiosqlite
import re
import logging
import os
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import io
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# Enable logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = -1002989893222
ADMIN_IDS = [6982991715, 7682254485]

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable not set. Please set it to your Telegram bot token.")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

DB_PATH = "flowers.db"

# -------------------------------
# FSM States
# -------------------------------
class AddCity(StatesGroup):
    waiting_for_name = State()
    waiting_for_products = State()

class EditCity(StatesGroup):
    waiting_for_new_name = State()

class AddProduct(StatesGroup):
    cities = State()
    photo = State()
    name = State()
    description = State()
    price = State()

class EditProduct(StatesGroup):
    waiting_for_field = State()
    waiting_for_value = State()

class DeleteProduct(StatesGroup):
    waiting_for_cities = State()

class OrderStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_area = State()
    waiting_for_comment = State()

class FeedbackStates(StatesGroup):
    waiting_for_accept_message = State()
    waiting_for_reject_reason = State()

class UserFeedbackState(StatesGroup):
    waiting_for_feedback = State()

class PDFTermsState(StatesGroup):
    waiting_for_content = State()

class CartQuantityState(StatesGroup):
    waiting_for_quantity = State()

# -------------------------------
# Database Initialization
# -------------------------------
async def init_db():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("""
            CREATE TABLE IF NOT EXISTS cities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE
            )
            """)
            await db.execute("""
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                city_id INTEGER,
                name TEXT,
                description TEXT,
                price REAL,
                photo TEXT,
                FOREIGN KEY(city_id) REFERENCES cities(id)
            )
            """)
            await db.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                product_id INTEGER,
                phone TEXT,
                area TEXT,
                comment TEXT,
                paid INTEGER DEFAULT 0,
                status TEXT DEFAULT 'pending',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """)
            await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                agreed_to_terms INTEGER DEFAULT 0,
                registered_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """)
            await db.execute("""
            CREATE TABLE IF NOT EXISTS cart (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                product_id INTEGER,
                quantity INTEGER DEFAULT 1,
                added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(id),
                FOREIGN KEY(product_id) REFERENCES products(id)
            )
            """)
            await db.execute("""
            CREATE TABLE IF NOT EXISTS terms_content (
                id INTEGER PRIMARY KEY,
                content TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
            """)
            
            await db.commit()
            logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Database initialization error: {e}")
        raise

# -------------------------------
# Helper Functions
# -------------------------------
def valid_phone(phone: str) -> bool:
    return bool(re.fullmatch(r'(\+380\d{9}|0\d{9})', phone))

async def safe_send_message(chat_id: int, text: str, reply_markup=None, parse_mode=None):
    try:
        await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        logger.info(f"Message sent successfully to {chat_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to send message to {chat_id}: {e}")
        return False

async def register_user(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("""
                INSERT OR IGNORE INTO users (id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            """, (user_id, username, first_name, last_name))
            await db.commit()
    except Exception as e:
        logger.error(f"Error registering user: {e}")

async def check_user_terms_agreement(user_id: int) -> bool:
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT agreed_to_terms FROM users WHERE id=?", (user_id,))
            row = await cursor.fetchone()
            return row and row[0] == 1
    except Exception as e:
        logger.error(f"Error checking terms agreement: {e}")
        return False

async def get_user_cart_city(user_id: int):
    """Get the city of products in user's cart"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT DISTINCT c.id, c.name
                FROM cart ca
                JOIN products p ON ca.product_id = p.id
                JOIN cities c ON p.city_id = c.id
                WHERE ca.user_id = ?
                LIMIT 1
            """, (user_id,))
            result = await cursor.fetchone()
            return result if result else None
    except Exception as e:
        logger.error(f"Error getting user cart city: {e}")
        return None

def create_terms_pdf(content: str) -> bytes:
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    
    # Title
    c.setFont("Helvetica-Bold", 16)
    try:
        c.drawString(100, 750, "–£–ú–û–í–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ú–ê–ì–ê–ó–ò–ù–£")
    except:
        c.drawString(100, 750, "TERMS OF USE")
    
    # Date
    c.setFont("Helvetica", 10)
    date_str = datetime.now().strftime("%d.%m.%Y")
    try:
        c.drawString(100, 720, f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {date_str}")
    except:
        c.drawString(100, 720, f"Created: {date_str}")
    
    # Content - handle Ukrainian characters
    c.setFont("Helvetica", 12)
    lines = content.split('\n')
    y_position = 680
    
    for line in lines:
        if y_position < 50:
            c.showPage()
            c.setFont("Helvetica", 12)
            y_position = 750
        
        # Handle long lines
        if len(line) > 70:
            words = line.split(' ')
            current_line = ""
            for word in words:
                if len(current_line + word) < 70:
                    current_line += word + " "
                else:
                    try:
                        c.drawString(100, y_position, current_line.strip())
                    except:
                        # Fallback for non-ASCII characters
                        safe_line = current_line.strip().encode('utf-8', errors='replace').decode('utf-8')
                        c.drawString(100, y_position, safe_line)
                    y_position -= 20
                    current_line = word + " "
            if current_line:
                try:
                    c.drawString(100, y_position, current_line.strip())
                except:
                    safe_line = current_line.strip().encode('utf-8', errors='replace').decode('utf-8')
                    c.drawString(100, y_position, safe_line)
                y_position -= 20
        else:
            try:
                c.drawString(100, y_position, line)
            except:
                safe_line = line.encode('utf-8', errors='replace').decode('utf-8')
                c.drawString(100, y_position, safe_line)
            y_position -= 20
    
    c.save()
    buffer.seek(0)
    return buffer.getvalue()

async def get_main_menu_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="main_order")
    kb.button(text="üõçÔ∏è –ö–æ—à–∏–∫", callback_data="main_cart")
    kb.button(text="üí¨ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="main_feedback")
    kb.adjust(1)
    return kb.as_markup()

# -------------------------------
# Start Command and Terms
# -------------------------------
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user = message.from_user
    await register_user(user.id, user.username, user.first_name, user.last_name)
    
    if await check_user_terms_agreement(user.id):
        await message.answer(
            "üå∏ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥!\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=await get_main_menu_keyboard()
        )
        return
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT content FROM terms_content ORDER BY created_at DESC LIMIT 1")
            row = await cursor.fetchone()
        
        if not row:
            default_terms = """–£–ú–û–í–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ú–ê–ì–ê–ó–ò–ù–£ –ö–í–Ü–¢–Ü–í

1. –ó–ê–ì–ê–õ–¨–ù–Ü –ü–û–õ–û–ñ–ï–ù–ù–Ø
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ —Ü–∏–º–∏ —É–º–æ–≤–∞–º–∏.

2. –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –¢–ê –û–ü–õ–ê–¢–ê
- –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç
- –û–ø–ª–∞—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ
- –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - 200 –≥—Ä–Ω

3. –î–û–°–¢–ê–í–ö–ê
- –î–æ—Å—Ç–∞–≤–∫–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 1-3 –¥–Ω—ñ–≤
- –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ

4. –ü–û–í–ï–†–ù–ï–ù–ù–Ø –¢–ê –û–ë–ú–Ü–ù
- –°–≤—ñ–∂—ñ –∫–≤—ñ—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—é –Ω–µ –ø—ñ–¥–ª—è–≥–∞—é—Ç—å
- –£ —Ä–∞–∑—ñ –±—Ä–∞–∫—É —Ç–æ–≤–∞—Ä—É - –ø–æ–≤–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—à—Ç—ñ–≤

5. –ö–û–ù–§–Ü–î–ï–ù–¶–Ü–ô–ù–Ü–°–¢–¨
- –í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ
- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º

6. –ö–û–ù–¢–ê–ö–¢–ò
Telegram: @flower_shop_support"""
            terms_content = default_terms
        else:
            terms_content = row[0]
        
        pdf_bytes = create_terms_pdf(terms_content)
        pdf_file = BufferedInputFile(pdf_bytes, filename="terms_and_conditions.pdf")
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü—Ä–∏–π–º–∞—é —É–º–æ–≤–∏", callback_data="terms_accept")
        kb.button(text="‚ùå –ù–µ –ø—Ä–∏–π–º–∞—é", callback_data="terms_decline")
        kb.adjust(1)
        
        await message.answer_document(
            pdf_file,
            caption="üìã <b>–£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É</b>\n\n"
                   "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. "
                   "–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏.",
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.callback_query(F.data == "terms_accept")
async def accept_terms(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET agreed_to_terms=1 WHERE id=?", (callback.from_user.id,))
            await db.commit()
        
        await callback.message.answer(
            "‚úÖ <b>–î—è–∫—É—î–º–æ!</b>\n\n"
            "–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –º–∞–≥–∞–∑–∏–Ω—É.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=await get_main_menu_keyboard()
        )
        await callback.answer("–£–º–æ–≤–∏ –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ")
    except Exception as e:
        logger.error(f"Error accepting terms: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "terms_decline")
async def decline_terms(callback: CallbackQuery):
    await callback.message.answer(
        "‚ùå <b>–£–º–æ–≤–∏ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ</b>\n\n"
        "–ù–∞ –∂–∞–ª—å, –±–µ–∑ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —É–º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.\n"
        "–Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –∑–Ω–æ–≤—É."
    )
    await callback.answer("–£–º–æ–≤–∏ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ")

# -------------------------------
# Main Menu Handlers
# -------------------------------
@dp.callback_query(F.data == "main_order")
async def main_order(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT name FROM cities")
            cities = [row[0] for row in await cursor.fetchall()]

        if not cities:
            cities = ["–ö–∏—ó–≤", "–î–Ω—ñ–ø—Ä–æ", "–õ—å–≤—ñ–≤"]

        # Check if user has items in cart from another city
        user_cart_city = await get_user_cart_city(callback.from_user.id)
        
        kb = InlineKeyboardBuilder()
        for city in cities:
            # If user has cart items from another city, disable other cities
            if user_cart_city and user_cart_city[1] != city:
                kb.button(text=f"üö´ {city} (–æ—á–∏—Å—Ç—ñ—Ç—å –∫–æ—à–∏–∫)", callback_data="cart_city_conflict")
            else:
                kb.button(text=city, callback_data=f"city:{city}")
        kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(2)

        cart_warning = ""
        if user_cart_city:
            cart_warning = f"\n\n‚ö†Ô∏è –£ –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É —î —Ç–æ–≤–∞—Ä–∏ –∑ –º—ñ—Å—Ç–∞ {user_cart_city[1]}. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–ª—è—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ –æ–¥–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ –∑–∞ —Ä–∞–∑."

        await callback.message.edit_text(
            f"üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ:{cart_warning}",
            reply_markup=kb.as_markup()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in main_order: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "cart_city_conflict")
async def cart_city_conflict(callback: CallbackQuery):
    await callback.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—Å—Ç—ñ—Ç—å –∫–æ—à–∏–∫ –∞–±–æ –æ—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

@dp.callback_query(F.data == "main_cart")
async def show_cart(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT c.id, p.name, p.price, c.quantity, p.photo, p.id as product_id, ct.name as city_name
                FROM cart c
                JOIN products p ON c.product_id = p.id
                JOIN cities ct ON p.city_id = ct.id
                WHERE c.user_id = ?
                ORDER BY c.added_at DESC
            """, (callback.from_user.id,))
            cart_items = await cursor.fetchall()
        
        if not cart_items:
            kb = InlineKeyboardBuilder()
            kb.button(text="üõí –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="main_order")
            kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            kb.adjust(1)
            
            await callback.message.edit_text(
                "üõçÔ∏è <b>–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\n"
                "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                reply_markup=kb.as_markup()
            )
            await callback.answer()
            return
        
        total_price = sum(item[2] * item[3] for item in cart_items)
        city_name = cart_items[0][6]  # All items should be from the same city
        cart_text = f"üõçÔ∏è <b>–í–∞—à –∫–æ—à–∏–∫ ({city_name}):</b>\n\n"
        
        for cart_id, name, price, quantity, photo, product_id, _ in cart_items:
            cart_text += f"üì¶ <b>{name}</b>\n"
            cart_text += f"üíµ {price} –≥—Ä–Ω √ó {quantity} —à—Ç = {price * quantity} –≥—Ä–Ω\n\n"
        
        cart_text += f"üí∞ <b>–í—Å—å–æ–≥–æ: {total_price} –≥—Ä–Ω</b>"
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cart_checkout")
        kb.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="cart_clear")
        kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(1)
        
        await callback.message.edit_text(cart_text, reply_markup=kb.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing cart: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "main_feedback")
async def main_feedback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserFeedbackState.waiting_for_feedback)
    await callback.message.edit_text(
        "üí¨ <b>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω—É."
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üå∏ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=await get_main_menu_keyboard()
    )
    await callback.answer()

# -------------------------------
# User Feedback Handler
# -------------------------------
@dp.message(UserFeedbackState.waiting_for_feedback, F.text)
async def receive_user_feedback(message: Message, state: FSMContext):
    try:
        feedback_text = message.text.strip()
        user = message.from_user
        
        # Get user's full name safely
        first_name = user.first_name or ""
        last_name = user.last_name or ""
        full_name = f"{first_name} {last_name}".strip() or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        
        feedback_message = (
            f"üí¨ <b>–ù–û–í–ò–ô –í–Ü–î–ì–£–ö –ö–õ–Ü–Ñ–ù–¢–ê</b>\n\n"
            f"üë§ –í—ñ–¥: {full_name}\n"
            f"üÜî ID: <a href='tg://user?id={user.id}'>{user.id}</a>\n"
            f"üë®‚Äçüíª Username: @{user.username or '–Ω–µ–º–∞—î'}\n\n"
            f"üí¨ <b>–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:</b>\n{feedback_text}"
        )
        
        success = await safe_send_message(
            MANAGER_CHAT_ID,
            feedback_message,
            parse_mode=ParseMode.HTML
        )
        
        if success:
            await message.answer(
                "‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫!</b>\n\n"
                "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.",
                reply_markup=await get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏</b>\n\n"
                "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤–∞—à –≤—ñ–¥–≥—É–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=await get_main_menu_keyboard()
            )
        
        await state.clear()
    except Exception as e:
        logger.error(f"Error in receive_user_feedback: {e}")
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=await get_main_menu_keyboard()
        )
        await state.clear()

# -------------------------------
# Admin Panel
# -------------------------------
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="adm:add_city")
    kb.button(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="adm:edit_city")
    kb.button(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="adm:delete_city")
    kb.button(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="adm:add_product")
    kb.button(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="adm:edit_product")
    kb.button(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="adm:delete_product")
    kb.button(text="üìã –°—Ç–≤–æ—Ä–∏—Ç–∏ PDF —É–º–æ–≤", callback_data="adm:create_terms")
    kb.adjust(1)

    await message.answer("‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.as_markup())

# -------------------------------
# Admin: Create Terms PDF
# -------------------------------
@dp.callback_query(F.data == "adm:create_terms")
async def create_terms_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PDFTermsState.waiting_for_content)
    await callback.message.answer(
        "üìã <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ —É–º–æ–≤–∞–º–∏</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç —É–º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É."
    )
    await callback.answer()

@dp.message(PDFTermsState.waiting_for_content, F.text)
async def create_terms_finish(message: Message, state: FSMContext):
    try:
        content = message.text.strip()
        
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM terms_content")
            await db.execute("INSERT INTO terms_content (content) VALUES (?)", (content,))
            await db.commit()
        
        pdf_bytes = create_terms_pdf(content)
        pdf_file = BufferedInputFile(pdf_bytes, filename="terms_preview.pdf")
        
        await message.answer_document(
            pdf_file,
            caption="‚úÖ <b>PDF –∑ —É–º–æ–≤–∞–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
                   "–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç."
        )
        await state.clear()
    except Exception as e:
        logger.error(f"Error creating terms PDF: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF")
        await state.clear()

# -------------------------------
# Admin: Add City with Product Copying
# -------------------------------
@dp.callback_query(F.data == "adm:add_city")
async def add_city_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddCity.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    await callback.answer()

@dp.message(AddCity.waiting_for_name, F.text)
async def add_city_finish(message: Message, state: FSMContext):
    city = message.text.strip()
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id FROM cities WHERE name=?", (city,))
            if await cursor.fetchone():
                await message.answer(f"‚ùå –ú—ñ—Å—Ç–æ <b>{city}</b> –≤–∂–µ —ñ—Å–Ω—É—î!")
                await state.clear()
                return
                
            cursor = await db.execute("INSERT INTO cities (name) VALUES (?)", (city,))
            new_city_id = cursor.lastrowid
            await db.commit()
            
            cursor = await db.execute("""
                SELECT DISTINCT c.id, c.name 
                FROM cities c 
                JOIN products p ON c.id = p.city_id 
                WHERE c.id != ?
            """, (new_city_id,))
            cities_with_products = await cursor.fetchall()
        
        if cities_with_products:
            await state.update_data(new_city_id=new_city_id, city_name=city)
            await state.set_state(AddCity.waiting_for_products)
            
            kb = InlineKeyboardBuilder()
            for city_id, city_name in cities_with_products:
                kb.button(text=f"üì¶ –ó –º—ñ—Å—Ç–∞ {city_name}", callback_data=f"copy_from:{city_id}")
            kb.button(text="‚ùå –ù–µ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏", callback_data="no_copy_products")
            kb.adjust(1)
            
            await message.answer(
                f"üèô –ú—ñ—Å—Ç–æ <b>{city}</b> –¥–æ–¥–∞–Ω–æ!\n\n"
                f"–•–æ—á–µ—Ç–µ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ç?",
                reply_markup=kb.as_markup()
            )
        else:
            await message.answer(f"üèô –ú—ñ—Å—Ç–æ <b>{city}</b> –¥–æ–¥–∞–Ω–æ!")
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error adding city: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –º—ñ—Å—Ç–∞")
        await state.clear()

@dp.callback_query(F.data.startswith("copy_from:"), AddCity.waiting_for_products)
async def copy_products_from_city(callback: CallbackQuery, state: FSMContext):
    try:
        source_city_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        new_city_id = data["new_city_id"]
        city_name = data["city_name"]
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT name, description, price, photo 
                FROM products 
                WHERE city_id = ?
            """, (source_city_id,))
            products = await cursor.fetchall()
            
            copied_count = 0
            for name, description, price, photo in products:
                await db.execute("""
                    INSERT INTO products (city_id, name, description, price, photo)
                    VALUES (?, ?, ?, ?, ?)
                """, (new_city_id, name, description, price, photo))
                copied_count += 1
            
            await db.commit()
            
            cursor = await db.execute("SELECT name FROM cities WHERE id=?", (source_city_id,))
            source_city_name = (await cursor.fetchone())[0]
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ú—ñ—Å—Ç–æ {city_name} —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
            f"–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {copied_count} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –º—ñ—Å—Ç–∞ {source_city_name}"
        )
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error copying products: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤")
        await state.clear()

@dp.callback_query(F.data == "no_copy_products", AddCity.waiting_for_products)
async def no_copy_products(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_name = data["city_name"]
    
    await callback.message.edit_text(f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city_name}</b> —Å—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∑ —Ç–æ–≤–∞—Ä—ñ–≤!")
    await state.clear()
    await callback.answer()

# -------------------------------
# Admin: Edit/Delete City
# -------------------------------
@dp.callback_query(F.data == "adm:edit_city")
async def edit_city_start(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, name FROM cities")
            cities = await cursor.fetchall()
        if not cities:
            await callback.message.answer("‚ùå –ú—ñ—Å—Ç –Ω–µ–º–∞")
            return
        kb = InlineKeyboardBuilder()
        for cid, name in cities:
            kb.button(text=name, callback_data=f"edit_city:{cid}")
        kb.adjust(2)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in edit_city_start: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç")

@dp.message(OrderStates.waiting_for_area, F.text)
async def order_area(message: Message, state: FSMContext):
    await state.update_data(area=message.text.strip())
    await state.set_state(OrderStates.waiting_for_comment)
    await message.answer("üìù –ú–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä (–∞–±–æ –Ω–∞–ø–∏—à–∏ '-' —è–∫—â–æ –Ω–µ–º–∞—î):")

@dp.message(OrderStates.waiting_for_comment, F.text)
async def order_comment(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        phone = data["phone"]
        area = data["area"]
        comment = message.text.strip()
        uid = data["user_id"]
        
        if data.get("is_cart_order"):
            # Cart order processing
            cart_items = data["cart_items"]
            total_price = sum(item[3] * item[1] for item in cart_items)
            city_name = cart_items[0][4]  # Get city name from cart items
            
            async with aiosqlite.connect(DB_PATH) as db:
                # Create separate orders for each product in cart
                order_ids = []
                for product_id, quantity, name, price, _ in cart_items:
                    for _ in range(quantity):
                        cur = await db.execute(
                            "INSERT INTO orders (user_id, product_id, phone, area, comment, status) "
                            "VALUES (?, ?, ?, ?, ?, 'pending')",
                            (uid, product_id, phone, area, comment)
                        )
                        order_ids.append(cur.lastrowid)
                
                await db.commit()
                
                # Clear cart
                await db.execute("DELETE FROM cart WHERE user_id=?", (uid,))
                await db.commit()
            
            # Prepare cart order message
            order_text = f"üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø (–ö–û–®–ò–ö) #{'-'.join(map(str, order_ids))}\n\n"
            
            username = message.from_user.username or "–Ω–µ–º–∞—î"
            first_name = message.from_user.first_name or ""
            last_name = message.from_user.last_name or ""
            full_name = f"{first_name} {last_name}".strip() or "–ù–µ–º–∞—î —ñ–º–µ–Ω—ñ"
            
            order_text += (
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {full_name}\n"
                f"üÜî ID: <a href='tg://user?id={uid}'>{uid}</a>\n"
                f"üë®‚Äçüíª Username: @{username}\n"
                f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üèò –†–∞–π–æ–Ω: {area}\n"
                f"üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}\n\n"
                f"üì¶ <b>–¢–û–í–ê–†–ò:</b>\n"
            )
            
            for product_id, quantity, name, price, _ in cart_items:
                subtotal = price * quantity
                order_text += f"‚Ä¢ {name} √ó {quantity} —à—Ç = {subtotal} –≥—Ä–Ω\n"
            
            order_text += f"\nüí∞ <b>–í–°–¨–û–ì–û: {total_price} –≥—Ä–Ω</b>\nüìå –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
            
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"order_accept:{order_ids[0]}")
            kb.button(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"order_reject:{order_ids[0]}")
            kb.adjust(2)
            
        else:
            # Single product order processing
            pid = data["product_id"]
            
            async with aiosqlite.connect(DB_PATH) as db:
                cur = await db.execute(
                    "INSERT INTO orders (user_id, product_id, phone, area, comment, status) "
                    "VALUES (?, ?, ?, ?, ?, 'pending')",
                    (uid, pid, phone, area, comment)
                )
                order_id = cur.lastrowid
                await db.commit()

                cur = await db.execute("""
                    SELECT p.name, p.price, c.name as city_name 
                    FROM products p
                    JOIN cities c ON p.city_id = c.id
                    WHERE p.id=?
                """, (pid,))
                product = await cur.fetchone()
            
            username = message.from_user.username or "–Ω–µ–º–∞—î"
            first_name = message.from_user.first_name or ""
            last_name = message.from_user.last_name or ""
            full_name = f"{first_name} {last_name}".strip() or "–ù–µ–º–∞—î —ñ–º–µ–Ω—ñ"

            order_text = (
                f"üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}\n\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {full_name}\n"
                f"üÜî ID: <a href='tg://user?id={uid}'>{uid}</a>\n"
                f"üë®‚Äçüíª Username: @{username}\n"
                f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {product[2]}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product[0]}\n"
                f"üíµ –¶—ñ–Ω–∞: {product[1]:.2f} –≥—Ä–Ω\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üèò –†–∞–π–æ–Ω: {area}\n"
                f"üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
            )

            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"order_accept:{order_id}")
            kb.button(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"order_reject:{order_id}")
            kb.adjust(2)

        # Notify client first
        await message.answer(
            "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é.",
            reply_markup=await get_main_menu_keyboard()
        )
        await state.clear()

        # Send to manager with retry logic
        success = await safe_send_message(
            MANAGER_CHAT_ID, 
            order_text, 
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
        if not success:
            logger.error(f"Failed to send order to manager")
            for admin_id in ADMIN_IDS:
                await safe_send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n\n{order_text}"
                )

    except Exception as e:
        logger.error(f"Error in order_comment: {e}")
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=await get_main_menu_keyboard()
        )
        await state.clear()

# -------------------------------
# Manager: Accept / Reject with Feedback
# -------------------------------
@dp.callback_query(F.data.startswith("order_accept:"))
async def accept_order(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT o.user_id, p.name 
                FROM orders o
                LEFT JOIN products p ON o.product_id = p.id
                WHERE o.id = ?
            """, (order_id,))
            order_data = await cursor.fetchone()
        
        if not order_data:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        user_id, product_name = order_data
        product_name = product_name or "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—à–∏–∫–∞"
        
        await state.update_data(order_id=order_id, user_id=user_id, product_name=product_name, action='accept')
        await state.set_state(FeedbackStates.waiting_for_accept_message)
        
        await callback.message.answer(
            f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–¥–µ –ø—Ä–∏–π–Ω—è—Ç–æ.\n"
            f"–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ (–∞–±–æ '-' –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ):"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error accepting order: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

@dp.message(FeedbackStates.waiting_for_accept_message, F.text)
async def send_accept_feedback(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data["order_id"]
        user_id = data["user_id"]
        product_name = data["product_name"]
        custom_message = message.text.strip()
        
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE orders SET status='accepted' WHERE id=?", (order_id,))
            await db.commit()
        
        if custom_message == '-':
            client_message = (
                f"‚úÖ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}\n\n"
                f"–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –°–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
        else:
            client_message = (
                f"‚úÖ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}\n\n"
                f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{custom_message}"
            )
        
        success = await safe_send_message(user_id, client_message, parse_mode=ParseMode.HTML)
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ —ñ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ!")
        else:
            await message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
        
        await state.clear()
    except Exception as e:
        logger.error(f"Error sending accept feedback: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await state.clear()

@dp.callback_query(F.data.startswith("order_reject:"))
async def reject_order(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT o.user_id, p.name 
                FROM orders o
                LEFT JOIN products p ON o.product_id = p.id
                WHERE o.id = ?
            """, (order_id,))
            order_data = await cursor.fetchone()
        
        if not order_data:
            await callback.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        user_id, product_name = order_data
        product_name = product_name or "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—à–∏–∫–∞"
        
        await state.update_data(order_id=order_id, user_id=user_id, product_name=product_name, action='reject')
        await state.set_state(FeedbackStates.waiting_for_reject_reason)
        
        await callback.message.answer(
            f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error rejecting order: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

@dp.message(FeedbackStates.waiting_for_reject_reason, F.text)
async def send_reject_feedback(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data["order_id"]
        user_id = data["user_id"]
        product_name = data["product_name"]
        reason = message.text.strip()
        
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE orders SET status='rejected' WHERE id=?", (order_id,))
            await db.commit()
        
        client_message = (
            f"‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}\n\n"
            f"üí¨ –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:\n{reason}\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω—å."
        )
        
        success = await safe_send_message(user_id, client_message, parse_mode=ParseMode.HTML)
        
        if success:
            await message.answer(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —ñ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ")
        else:
            await message.answer(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
        
        await state.clear()
    except Exception as e:
        logger.error(f"Error sending reject feedback: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await state.clear()

# -------------------------------
# Error Handler
# -------------------------------
@dp.error()
async def error_handler(event, exception):
    logger.error(f"Error occurred: {exception}")
    return True

# -------------------------------
# Main Function
# -------------------------------
async def main():
    try:
        await init_db()
        logger.info("Starting bot polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())

@dp.callback_query(F.data.startswith("edit_city:"))
async def edit_city_choose(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split(":")[1])
    await state.update_data(city_id=city_id)
    await state.set_state(EditCity.waiting_for_new_name)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    await callback.answer()

@dp.message(EditCity.waiting_for_new_name, F.text)
async def edit_city_finish(message: Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    city_id = data["city_id"]
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE cities SET name=? WHERE id=?", (new_name, city_id))
            await db.commit()
        await message.answer(f"üèô –ú—ñ—Å—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
        await state.clear()
    except Exception as e:
        logger.error(f"Error updating city: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞")
        await state.clear()

@dp.callback_query(F.data == "adm:delete_city")
async def delete_city_start(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, name FROM cities")
            cities = await cursor.fetchall()
        if not cities:
            await callback.message.answer("‚ùå –ú—ñ—Å—Ç –Ω–µ–º–∞")
            return
        kb = InlineKeyboardBuilder()
        for cid, name in cities:
            kb.button(text=name, callback_data=f"delete_city:{cid}")
        kb.adjust(2)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in delete_city_start: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç")

@dp.callback_query(F.data.startswith("delete_city:"))
async def delete_city(callback: CallbackQuery):
    city_id = int(callback.data.split(":")[1])
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM cities WHERE id=?", (city_id,))
            await db.execute("DELETE FROM products WHERE city_id=?", (city_id,))
            await db.commit()
        await callback.message.answer("‚úÖ –ú—ñ—Å—Ç–æ —Ç–∞ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error deleting city: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º—ñ—Å—Ç–∞")

# -------------------------------
# Admin: Add Product to Multiple Cities
# -------------------------------
@dp.callback_query(F.data == "adm:add_product")
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, name FROM cities")
            cities = await cursor.fetchall()
        
        if not cities:
            await callback.message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –º—ñ—Å—Ç–∞")
            return
            
        kb = InlineKeyboardBuilder()
        for cid, name in cities:
            kb.button(text=f"‚òê {name}", callback_data=f"city_select:{cid}")
        kb.button(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cities_confirmed")
        kb.adjust(2)
        
        await state.update_data(selected_cities=set())
        await state.set_state(AddProduct.cities)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É (–º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞):", reply_markup=kb.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in add_product_start: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º—ñ—Å—Ç")

@dp.callback_query(F.data.startswith("city_select:"), AddProduct.cities)
async def toggle_city_selection(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    selected_cities = data.get('selected_cities', set())
    
    if city_id in selected_cities:
        selected_cities.remove(city_id)
    else:
        selected_cities.add(city_id)
    
    await state.update_data(selected_cities=selected_cities)
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id, name FROM cities")
            cities = await cursor.fetchall()
        
        kb = InlineKeyboardBuilder()
        for cid, name in cities:
            if cid in selected_cities:
                kb.button(text=f"‚òëÔ∏è {name}", callback_data=f"city_select:{cid}")
            else:
                kb.button(text=f"‚òê {name}", callback_data=f"city_select:{cid}")
        kb.button(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cities_confirmed")
        kb.adjust(2)
        
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
        await callback.answer(f"{'–í–∏–±—Ä–∞–Ω–æ' if city_id in selected_cities else '–°–∫–∞—Å–æ–≤–∞–Ω–æ'}")
    except Exception as e:
        logger.error(f"Error updating city selection: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "cities_confirmed", AddProduct.cities)
async def confirm_cities_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_cities = data.get('selected_cities', set())
    
    if not selected_cities:
        await callback.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –º—ñ—Å—Ç–æ")
        return
    
    await state.set_state(AddProduct.photo)
    await callback.message.answer(f"–í–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ç: {len(selected_cities)}\n–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:")
    await callback.answer()

@dp.message(AddProduct.photo, F.photo)
async def add_product_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await state.set_state(AddProduct.name)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

@dp.message(AddProduct.name, F.text)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddProduct.description)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

@dp.message(AddProduct.description, F.text)
async def add_product_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AddProduct.price)
    await message.answer("–í–≤–µ–¥–∏ —Ü—ñ–Ω—É (—á–∏—Å–ª–æ–º):")

@dp.message(AddProduct.price, F.text)
async def add_product_price(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_cities, photo, name, desc = data["selected_cities"], data["photo"], data["name"], data["description"]
    try:
        price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–º")
        return

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            city_names = []
            for city_id in selected_cities:
                cursor = await db.execute("SELECT name FROM cities WHERE id=?", (city_id,))
                row = await cursor.fetchone()
                if row:
                    city_names.append(row[0])
                    await db.execute("""
                        INSERT INTO products (city_id, name, description, price, photo)
                        VALUES (?, ?, ?, ?, ?)""",
                        (city_id, name, desc, price, photo))
            
            await db.commit()

        cities_text = ", ".join(city_names)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{name}</b> –¥–æ–¥–∞–Ω–æ –≤ –º—ñ—Å—Ç–∞: {cities_text}!")
        await state.clear()
    except Exception as e:
        logger.error(f"Error adding product to multiple cities: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É")
        await state.clear()

# -------------------------------
# Admin: Edit Product (Fixed to edit globally by name)
# -------------------------------
@dp.callback_query(F.data == "adm:edit_product")
async def edit_product_start(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT DISTINCT name FROM products ORDER BY name")
            product_names = await cursor.fetchall()
        if not product_names:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞")
            return
        kb = InlineKeyboardBuilder()
        for name_tuple in product_names:
            name = name_tuple[0]
            kb.button(text=name, callback_data=f"edit_product_name:{name}")
        kb.adjust(1)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in edit_product_start: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤")

@dp.callback_query(F.data.startswith("edit_product_name:"))
async def edit_product_choose(callback: CallbackQuery, state: FSMContext):
    product_name = callback.data.split(":", 1)[1]
    await state.update_data(product_name=product_name)
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–≤–∞", callback_data="field:name")
    kb.button(text="–û–ø–∏—Å", callback_data="field:description")
    kb.button(text="–¶—ñ–Ω–∞", callback_data="field:price")
    kb.adjust(1)
    await callback.message.answer(f"–©–æ —Ö–æ—á–µ—à —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤ —Ç–æ–≤–∞—Ä—ñ '{product_name}'?", reply_markup=kb.as_markup())
    await state.set_state(EditProduct.waiting_for_field)
    await callback.answer()

@dp.callback_query(F.data.startswith("field:"), EditProduct.waiting_for_field)
async def edit_product_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    await state.update_data(field=field)
    await state.set_state(EditProduct.waiting_for_value)
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {field}:")
    await callback.answer()

@dp.message(EditProduct.waiting_for_value, F.text)
async def edit_product_value(message: Message, state: FSMContext):
    data = await state.get_data()
    product_name = data["product_name"]
    field = data["field"]
    value = message.text.strip()
    
    if field == "price":
        try:
            value = float(value)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞")
            return
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(f"SELECT COUNT(*) FROM products WHERE name=?", (product_name,))
            count_before = (await cursor.fetchone())[0]
            
            # Update ALL products with this name across all cities
            await db.execute(f"UPDATE products SET {field}=? WHERE name=?", (value, product_name))
            await db.commit()
            
            cursor = await db.execute(f"SELECT COUNT(*) FROM products WHERE name=?", (product_name,))
            count_after = (await cursor.fetchone())[0]
        
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ {count_after} –º—ñ—Å—Ç–∞—Ö!")
        await state.clear()
    except Exception as e:
        logger.error(f"Error updating product: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É")
        await state.clear()

# -------------------------------
# Admin: Delete Product
# -------------------------------
@dp.callback_query(F.data == "adm:delete_product")
async def delete_product_start(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT DISTINCT name FROM products ORDER BY name")
            products = await cursor.fetchall()
        
        if not products:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞")
            return
            
        kb = InlineKeyboardBuilder()
        for name_tuple in products:
            name = name_tuple[0]
            display_name = name[:30] + "..." if len(name) > 30 else name
            kb.button(text=display_name, callback_data=f"del_product_name:{name}")
        
        kb.adjust(1)
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in delete_product_start: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤")

@dp.callback_query(F.data.startswith("del_product_name:"))
async def delete_product_show_cities(callback: CallbackQuery, state: FSMContext):
    product_name = callback.data.split(":", 1)[1]
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT p.id, c.name, c.id as city_id
                FROM products p
                JOIN cities c ON p.city_id = c.id
                WHERE p.name = ?
                ORDER BY c.name
            """, (product_name,))
            product_cities = await cursor.fetchall()
        
        if not product_cities:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await state.update_data(product_name=product_name, selected_for_deletion=set())
        await state.set_state(DeleteProduct.waiting_for_cities)
        
        kb = InlineKeyboardBuilder()
        for pid, city_name, city_id in product_cities:
            kb.button(text=f"‚òê {city_name}", callback_data=f"del_city_select:{city_id}")
        kb.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç", callback_data="confirm_deletion")
        kb.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É—Å—ñ—Ö –º—ñ—Å—Ç", callback_data="delete_all_cities")
        kb.adjust(2)
        
        await callback.message.answer(
            f"–¢–æ–≤–∞—Ä '<b>{product_name}</b>' –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º—ñ—Å—Ç–∞—Ö:\n"
            f"–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–∞, –∑ —è–∫–∏—Ö —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä:",
            reply_markup=kb.as_markup()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing cities for deletion: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data.startswith("del_city_select:"), DeleteProduct.waiting_for_cities)
async def toggle_city_for_deletion(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    product_name = data["product_name"]
    selected_for_deletion = data.get('selected_for_deletion', set())
    
    if city_id in selected_for_deletion:
        selected_for_deletion.remove(city_id)
    else:
        selected_for_deletion.add(city_id)
    
    await state.update_data(selected_for_deletion=selected_for_deletion)
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT p.id, c.name, c.id as city_id
                FROM products p
                JOIN cities c ON p.city_id = c.id
                WHERE p.name = ?
                ORDER BY c.name
            """, (product_name,))
            product_cities = await cursor.fetchall()
        
        kb = InlineKeyboardBuilder()
        for pid, city_name, city_id_db in product_cities:
            if city_id_db in selected_for_deletion:
                kb.button(text=f"‚òëÔ∏è {city_name}", callback_data=f"del_city_select:{city_id_db}")
            else:
                kb.button(text=f"‚òê {city_name}", callback_data=f"del_city_select:{city_id_db}")
        kb.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç", callback_data="confirm_deletion")
        kb.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É—Å—ñ—Ö –º—ñ—Å—Ç", callback_data="delete_all_cities")
        kb.adjust(2)
        
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
        await callback.answer(f"{'–û–±—Ä–∞–Ω–æ' if city_id in selected_for_deletion else '–°–∫–∞—Å–æ–≤–∞–Ω–æ'}")
    except Exception as e:
        logger.error(f"Error updating deletion selection: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "confirm_deletion", DeleteProduct.waiting_for_cities)
async def confirm_partial_deletion(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_name = data["product_name"]
    selected_for_deletion = data.get('selected_for_deletion', set())
    
    if not selected_for_deletion:
        await callback.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –º—ñ—Å—Ç–æ")
        return
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            deleted_cities = []
            for city_id in selected_for_deletion:
                cursor = await db.execute("SELECT name FROM cities WHERE id=?", (city_id,))
                row = await cursor.fetchone()
                if row:
                    deleted_cities.append(row[0])
                
                await db.execute("DELETE FROM products WHERE name=? AND city_id=?", (product_name, city_id))
            
            await db.commit()
        
        cities_text = ", ".join(deleted_cities)
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '<b>{product_name}</b>' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º—ñ—Å—Ç: {cities_text}")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"Error deleting product from cities: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É")
        await state.clear()

@dp.callback_query(F.data == "delete_all_cities", DeleteProduct.waiting_for_cities)
async def delete_from_all_cities(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_name = data["product_name"]
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM products WHERE name=?", (product_name,))
            await db.commit()
        
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '<b>{product_name}</b>' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É—Å—ñ—Ö –º—ñ—Å—Ç!")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"Error deleting product from all cities: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É")
        await state.clear()

# -------------------------------
# Client: Select City & Products
# -------------------------------
@dp.callback_query(F.data.startswith("city:"))
async def select_city(callback: CallbackQuery):
    city = callback.data.split(":")[1]
    await callback.answer(f"–¢–∏ –≤–∏–±—Ä–∞–≤ {city}")

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "SELECT id, name, price, description, photo FROM products "
                "WHERE city_id=(SELECT id FROM cities WHERE name=?)", (city,)
            )
            products = await cursor.fetchall()

        if not products:
            await callback.message.answer("–£ —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ üå±")
            return

        for pid, name, price, desc, photo in products:
            kb = InlineKeyboardBuilder()
            kb.button(text="üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_to_cart:{pid}")
            kb.button(text="‚ö° –ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑", callback_data=f"buy:{pid}")
            kb.adjust(2)
            
            caption = f"<b>{name}</b>\n{desc}\nüíµ {price} –≥—Ä–Ω"
            
            try:
                if photo:
                    await callback.message.answer_photo(
                        photo,
                        caption=caption,
                        reply_markup=kb.as_markup()
                    )
                else:
                    await callback.message.answer(
                        caption,
                        reply_markup=kb.as_markup()
                    )
            except Exception as e:
                logger.error(f"Error sending product {pid}: {e}")
                await callback.message.answer(
                    caption,
                    reply_markup=kb.as_markup()
                )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_main")
        kb.adjust(1)
        
        await callback.message.answer(
            "üå∏ –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏—â–µ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é:",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in select_city: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤")

# -------------------------------
# Cart Management (with quantity selection)
# -------------------------------
@dp.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split(":")[1])
        user_id = callback.from_user.id
        
        # Check if user has items from another city
        user_cart_city = await get_user_cart_city(user_id)
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT c.name FROM products p
                JOIN cities c ON p.city_id = c.id
                WHERE p.id = ?
            """, (product_id,))
            product_city = await cursor.fetchone()
            
            if user_cart_city and user_cart_city[1] != product_city[0]:
                await callback.answer("‚ùå –£ –∫–æ—à–∏–∫—É –≤–∂–µ —î —Ç–æ–≤–∞—Ä–∏ –∑ —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞. –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—Å—Ç—ñ—Ç—å –∫–æ—à–∏–∫!", show_alert=True)
                return
            
            cursor = await db.execute("SELECT name FROM products WHERE id=?", (product_id,))
            product_name = (await cursor.fetchone())[0]
        
        await state.update_data(product_id=product_id, product_name=product_name)
        await state.set_state(CartQuantityState.waiting_for_quantity)
        
        await callback.message.answer(
            f"üì¶ <b>{product_name}</b>\n\n"
            f"–°–∫—ñ–ª—å–∫–∏ —à—Ç—É–∫ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫? (–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10)"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in add_to_cart: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ –∫–æ—à–∏–∫")

@dp.message(CartQuantityState.waiting_for_quantity, F.text)
async def add_to_cart_with_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity < 1 or quantity > 10:
            await message.answer("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 10")
            return
        
        data = await state.get_data()
        product_id = data["product_id"]
        product_name = data["product_name"]
        user_id = message.from_user.id
        
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT id, quantity FROM cart 
                WHERE user_id=? AND product_id=?
            """, (user_id, product_id))
            existing = await cursor.fetchone()
            
            if existing:
                new_quantity = existing[1] + quantity
                await db.execute("""
                    UPDATE cart SET quantity=? WHERE id=?
                """, (new_quantity, existing[0]))
            else:
                await db.execute("""
                    INSERT INTO cart (user_id, product_id, quantity)
                    VALUES (?, ?, ?)
                """, (user_id, product_id, quantity))
            
            await db.commit()
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data="main_cart")
        kb.button(text="‚ûï –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="main_order")
        kb.adjust(1)
        
        await message.answer(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!</b>\n\n"
            f"üì¶ {product_name} √ó {quantity} —à—Ç",
            reply_markup=kb.as_markup()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10")
    except Exception as e:
        logger.error(f"Error adding to cart with quantity: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ –∫–æ—à–∏–∫")
        await state.clear()

@dp.callback_query(F.data == "cart_clear")
async def clear_cart(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM cart WHERE user_id=?", (callback.from_user.id,))
            await db.commit()
        
        await callback.message.edit_text(
            "üóëÔ∏è <b>–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!</b>\n\n"
            "–í–∞—à –∫–æ—à–∏–∫ —Ç–µ–ø–µ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π.",
            reply_markup=await get_main_menu_keyboard()
        )
        await callback.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error clearing cart: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

@dp.callback_query(F.data == "cart_checkout")
async def cart_checkout(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("""
                SELECT c.product_id, c.quantity, p.name, p.price, ct.name as city_name
                FROM cart c
                JOIN products p ON c.product_id = p.id
                JOIN cities ct ON p.city_id = ct.id
                WHERE c.user_id = ?
            """, (callback.from_user.id,))
            cart_items = await cursor.fetchall()
        
        if not cart_items:
            await callback.answer("‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return
        
        await state.update_data(
            cart_items=cart_items,
            user_id=callback.from_user.id,
            is_cart_order=True
        )
        await state.set_state(OrderStates.waiting_for_phone)
        
        await callback.message.edit_text(
            "üì± <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (0XXXXXXXXX –∞–±–æ +380XXXXXXXXX):"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in cart checkout: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

# -------------------------------
# Orders FSM
# -------------------------------
@dp.callback_query(F.data.startswith("buy:"))
async def buy_product(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split(":")[1])
    await state.update_data(product_id=pid, user_id=callback.from_user.id)
    await state.set_state(OrderStates.waiting_for_phone)
    await callback.message.answer("üì± –í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (0XXXXXXXXX –∞–±–æ +380XXXXXXXXX):")
    await callback.answer()

@dp.message(OrderStates.waiting_for_phone, F.text)
async def order_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return
    await state.update_data(phone=phone)
    await state.set_state(OrderStates.waiting_for_area)
    await message.answer("üèò –í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä–∞–π–æ–Ω/–∞–¥—Ä–µ—Å—É:")